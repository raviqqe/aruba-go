
[TestFailedFeatures - 1]
Feature: File

  Scenario: Create a file                                # failures/file.feature:3
    Given a file named "foo.txt" with "foo"              # scenario.go:193 -> github.com/raviqqe/aruba-go.InitializeScenario.func1
    When I successfully run `test -r foo.txt`            # scenario.go:204 -> github.com/raviqqe/aruba-go.runCommand
    Then a file named "foo.txt" should not contain "foo" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" not to contain "foo"

  Scenario: Create a file without its content        # failures/file.feature:8
    Given a file named "foo.txt" with ""             # scenario.go:193 -> github.com/raviqqe/aruba-go.InitializeScenario.func1
    When I successfully run `test -r foo.txt`        # scenario.go:204 -> github.com/raviqqe/aruba-go.runCommand
    Then a file named "foo.txt" should contain "foo" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" to contain "foo"

  Scenario: Create a file with a doc-string              # failures/file.feature:13
    Given a file named "foo.txt" with:                   # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      foo
      """
    When I successfully run `test -r foo.txt`            # scenario.go:204 -> github.com/raviqqe/aruba-go.runCommand
    Then a file named "foo.txt" should not contain "foo" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" not to contain "foo"

  Scenario: Create a file with an empty doc-string   # failures/file.feature:21
    Given a file named "foo.txt" with:               # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      
      """
    When I successfully run `test -r foo.txt`        # scenario.go:204 -> github.com/raviqqe/aruba-go.runCommand
    Then a file named "foo.txt" should contain "foo" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" to contain "foo"

  Scenario: Create a file with a content type # failures/file.feature:29
    Given a file named "foo.txt" with:        # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """ foo
      foo
      """
    When I successfully run `cat foo.txt`     # scenario.go:204 -> github.com/raviqqe/aruba-go.runCommand
    Then the stdout should not contain "foo"  # scenario.go:206 -> github.com/raviqqe/aruba-go.InitializeScenario.func3
    expected stdout "foo\n" not to contain "foo"

  Scenario: Check file existence                         # failures/file.feature:37
    Given a file named "foo.txt" with ""                 # scenario.go:193 -> github.com/raviqqe/aruba-go.InitializeScenario.func1
    Then <article> file named "foo.txt" should not exist # scenario.go:235 -> github.com/raviqqe/aruba-go.fileExists

    Examples:
      | article |
      | a       |
        file "foo.txt" should not exist
      | the     |
        file "foo.txt" should not exist

  Scenario: Create a directory                      # failures/file.feature:46
    Given a directory named "foo"                   # scenario.go:203 -> github.com/raviqqe/aruba-go.createDirectory
    Then the directory named "foo" should not exist # scenario.go:235 -> github.com/raviqqe/aruba-go.fileExists
    directory "foo" should not exist

  Scenario: Check a file to contain a string             # failures/file.feature:52
    When a file named "foo.txt" with:                    # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      foo
      """
    Then a file named "foo.txt" should not contain "foo" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" not to contain "foo"

  Scenario: Check a file not to contain a string     # failures/file.feature:59
    When a file named "foo.txt" with:                # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      foo
      """
    Then a file named "foo.txt" should contain "bar" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" to contain "bar"

  Scenario: Check a file to contain a string        # failures/file.feature:68
    When a file named "foo.txt" with:               # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      a
      b
      c
      d
      """
    Then a file named "foo.txt" should not contain: # scenario.go:231 -> github.com/raviqqe/aruba-go.InitializeScenario.func6
      """
      b
      c
      """
    expected file "foo.txt" not to contain "b\nc"

  Scenario: Check a file to contain an exact string         # failures/file.feature:82
    When a file named "foo.txt" with:                       # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      a
      b
      """
    Then a file named "foo.txt" should not contain exactly: # scenario.go:231 -> github.com/raviqqe/aruba-go.InitializeScenario.func6
      """
      a
      b
      """
    expected file "foo.txt" not to contain exactly "a\nb"

  Scenario: Check a file to contain an exact string with trailing spaces # failures/file.feature:94
    When a file named "foo.txt" with:                                    # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      a
      
      """
    Then a file named "foo.txt" should not contain exactly:              # scenario.go:231 -> github.com/raviqqe/aruba-go.InitializeScenario.func6
      """
      a
      """
    expected file "foo.txt" not to contain exactly "a"

  Scenario: Check a file not to contain a string # failures/file.feature:105
    When a file named "foo.txt" with:            # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      a
      b
      """
    Then a file named "foo.txt" should contain:  # scenario.go:231 -> github.com/raviqqe/aruba-go.InitializeScenario.func6
      """
      a
      c
      """
    expected file "foo.txt" to contain "a\nc"

  Scenario: Check a file to contain a newline            # failures/file.feature:117
    When a file named "foo.txt" with:                    # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      a
      """
    Then a file named "foo.txt" should not contain "a\n" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" not to contain "a\n"

  Scenario: Check a file to contain two newlines      # failures/file.feature:124
    When a file named "foo.txt" with:                 # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
      a
      
      
      """
    Then a file named "foo.txt" should contain "a\n"  # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    And a file named "foo.txt" should contain "a\n\n" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" to contain "a\n\n"

  Scenario: Check a file to contain two newlines         # failures/file.feature:134
    When a file named "foo.txt" with:                    # scenario.go:200 -> github.com/raviqqe/aruba-go.InitializeScenario.func2
      """
        a
      """
    Then a file named "foo.txt" should not contain "  a" # scenario.go:223 -> github.com/raviqqe/aruba-go.InitializeScenario.func5
    expected file "foo.txt" not to contain "  a"

--- Failed steps:

  Scenario: Create a file # failures/file.feature:3
    Then a file named "foo.txt" should not contain "foo" # failures/file.feature:6
      Error: expected file "foo.txt" not to contain "foo"

  Scenario: Create a file without its content # failures/file.feature:8
    Then a file named "foo.txt" should contain "foo" # failures/file.feature:11
      Error: expected file "foo.txt" to contain "foo"

  Scenario: Create a file with a doc-string # failures/file.feature:13
    Then a file named "foo.txt" should not contain "foo" # failures/file.feature:19
      Error: expected file "foo.txt" not to contain "foo"

  Scenario: Create a file with an empty doc-string # failures/file.feature:21
    Then a file named "foo.txt" should contain "foo" # failures/file.feature:27
      Error: expected file "foo.txt" to contain "foo"

  Scenario: Create a file with a content type # failures/file.feature:29
    Then the stdout should not contain "foo" # failures/file.feature:35
      Error: expected stdout "foo\n" not to contain "foo"

  Scenario: Check file existence # failures/file.feature:37
    Then a file named "foo.txt" should not exist # failures/file.feature:39
      Error: file "foo.txt" should not exist

  Scenario: Check file existence # failures/file.feature:37
    Then the file named "foo.txt" should not exist # failures/file.feature:39
      Error: file "foo.txt" should not exist

  Scenario: Create a directory # failures/file.feature:46
    Then the directory named "foo" should not exist # failures/file.feature:48
      Error: directory "foo" should not exist

  Scenario: Check a file to contain a string # failures/file.feature:52
    Then a file named "foo.txt" should not contain "foo" # failures/file.feature:57
      Error: expected file "foo.txt" not to contain "foo"

  Scenario: Check a file not to contain a string # failures/file.feature:59
    Then a file named "foo.txt" should contain "bar" # failures/file.feature:64
      Error: expected file "foo.txt" to contain "bar"

  Scenario: Check a file to contain a string # failures/file.feature:68
    Then a file named "foo.txt" should not contain: # failures/file.feature:76
      Error: expected file "foo.txt" not to contain "b\nc"

  Scenario: Check a file to contain an exact string # failures/file.feature:82
    Then a file named "foo.txt" should not contain exactly: # failures/file.feature:88
      Error: expected file "foo.txt" not to contain exactly "a\nb"

  Scenario: Check a file to contain an exact string with trailing spaces # failures/file.feature:94
    Then a file named "foo.txt" should not contain exactly: # failures/file.feature:100
      Error: expected file "foo.txt" not to contain exactly "a"

  Scenario: Check a file not to contain a string # failures/file.feature:105
    Then a file named "foo.txt" should contain: # failures/file.feature:111
      Error: expected file "foo.txt" to contain "a\nc"

  Scenario: Check a file to contain a newline # failures/file.feature:117
    Then a file named "foo.txt" should not contain "a\n" # failures/file.feature:122
      Error: expected file "foo.txt" not to contain "a\n"

  Scenario: Check a file to contain two newlines # failures/file.feature:124
    And a file named "foo.txt" should contain "a\n\n" # failures/file.feature:132
      Error: expected file "foo.txt" to contain "a\n\n"

  Scenario: Check a file to contain two newlines # failures/file.feature:134
    Then a file named "foo.txt" should not contain "  a" # failures/file.feature:139
      Error: expected file "foo.txt" not to contain "  a"


17 scenarios (17 failed)
40 steps (23 passed, 17 failed)

---
